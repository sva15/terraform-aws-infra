# Environment Configuration
environment = "dev"  # Options: dev, int, prod

# Project Configuration
project_name = "IMRS-InsightGen"
lambda_prefix = "insightgen"

# Source Configuration
use_local_source = true  # Set to false to use S3 sources
create_s3_bucket = true  # Create S3 bucket for uploading local files

# S3 Configuration (when use_local_source = false)
lambda_code_s3_bucket = ""     # S3 bucket containing Lambda code
lambda_layers_s3_bucket = ""   # S3 bucket containing Lambda layers

# Local Paths (when use_local_source = true)
lambda_code_local_path = "./backend/python-aws-lambda-functions"
lambda_layers_local_path = "./backend/lambda-layers"

# S3 Bucket Name (optional - will be auto-generated if not provided)
s3_bucket_name = ""

# VPC Configuration
vpc_name = "my-vpc"
subnet_names = [
  "private-subnet-1",
  "private-subnet-2"
]
security_group_names = [
  "lambda-security-group"
]
public_subnet_names = [
  "public-subnet-1",
  "public-subnet-2"
]

# Lambda Configuration
lambda_runtime = "python3.9"
lambda_timeout = 300
lambda_memory_size = 512

# Layer Mappings - Define which layers each Lambda function should use
lambda_layer_mappings = {
  "data-processor" = ["pandas-layer", "numpy-layer"]
  "api-handler" = ["requests-layer", "boto3-layer"]
  "ml-inference" = ["sklearn-layer", "pandas-layer", "numpy-layer"]
  "file-processor" = ["pandas-layer"]
  "notification-handler" = ["requests-layer"]
}

# SNS Configuration
sns_topic_names = [
  "data-events",
  "file-upload",
  "user-notifications",
  "system-alerts",
  "processing-status"
]

# SNS Subscriptions - Define which Lambda functions subscribe to which topics
lambda_sns_subscriptions = {
  "data-processor" = ["data-events", "file-upload"]
  "api-handler" = ["user-notifications"]
  "ml-inference" = ["data-events", "processing-status"]
  "notification-handler" = ["user-notifications", "system-alerts"]
}

enable_sns_encryption = true

# Additional Tags
additional_tags = {
  Owner       = "DataTeam"
  CostCenter  = "Engineering"
  Application = "InsightGen"
}

# AWS Region
aws_region = "us-east-1"

# Frontend/UI Configuration
use_local_ui_source = true  # Set to false to use existing S3 bucket
ui_assets_local_path = "./ui/dist"  # Path to Angular build output
ui_s3_bucket = ""  # S3 bucket for UI assets (when use_local_ui_source = false)

# ECR Configuration
ecr_repositories = ["angular-ui", "nginx-alpine"]

# EC2 Configuration
instance_type = "t3.micro"
create_key_pair = true

# AMI Configuration (for shared custom AMIs)
ami_id = ""  # Specific AMI ID (leave empty to use ami_name_pattern)
ami_owner = "123456789012"  # Replace with the account ID that shared the AMI
ami_name_pattern = "ubuntu-*"  # Pattern to search for Ubuntu-based AMIs

# Database Configuration (RDS PostgreSQL)
deploy_database = true
postgres_db_name = "ifrs_dev"
postgres_user = "ifrs_user"
postgres_password = "ifrs123"
postgres_port = 5432
# Note: pgAdmin is not deployed with RDS - use external tools or deploy separately

# SQL Backup Configuration (choose one method)
# Option 1: S3 backup
sql_backup_s3_bucket = ""  # S3 bucket containing backup file
sql_backup_s3_key = ""     # S3 key for backup file (e.g., "backups/ifrs_backup.sql")

# Option 2: Local backup
sql_backup_local_path = ""  # Local path to SQL backup file
